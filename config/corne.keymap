/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>

// Layers
#define BASE 0
#define NUMS 1
#define NAV 2
#define BT 3

// TAP_DANCE settings
#define TAP_DANCE_MS 200
#define HOLD_TAP_MS 200
// This makes combos explicit, helps prevent rolling when typing normally
#define COMBO_TIMEOUT_MS 24
#define PRIOR_IDLE_MS 100

// MACROS to make the the code easier to read
// include name or reference in keymap
// Format:
//      name        reference             keys, key2
//
// Tap Dances
#define TD_GUIMENU  &td0               // LGUI K_CMENU
#define TD_SHLOCK   &td1               // RSHIFT CAPSLOCK
// Focus Window (+i3 bindings)
#define FC_LEFT     &kp LG(LEFT)       // LGUI + LEFT
#define FC_RIGHT    &kp LG(RIGHT)      // LGUI + RIGHT
#define FC_UP       &kp LG(UP)         // LGUI + UP
#define FC_DOWN     &kp LG(DOWN)       // LGUI + DOWN
// Move Window (+i3 bindings)
#define MV_LEFT     &kp LS(LG(LEFT))   // LSHIFT + LGUI + LEFT
#define MV_RIGHT    &kp LS(LG(RIGHT))  // LSHIFT + LGUI + RIGHT
#define MV_UP       &kp LS(LG(UP))     // LSHIFT + LGUI + UP
#define MV_DOWN     &kp LS(LG(DOWN))   // LSHIFT + LGUI + DOWN

&led_strip {
    chain-length = <27>;
};

&mt {
    tapping-term-ms = <HOLD_TAP_MS>;
    flavor = "balanced";
    retro-tap;
};

/ {
  behaviors{
    td0: tap_dance_0 {
      compatible = "zmk,behavior-tap-dance";
      #binding-cells = <0>;
      tapping-term-ms = <TAP_DANCE_MS>;
      bindings = <&kp RGUI>, <&kp K_CMENU>;
    };

    td1: tap_dance_1 {
      compatible = "zmk,behavior-tap-dance";
      #binding-cells = <0>;
      tapping-term-ms = <TAP_DANCE_MS>;
      bindings = <&kp RSHIFT>, <&kp CAPSLOCK>;
    };

    hlkr: hold_layer_key_repeat {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      flavor = "balanced";
      tapping-term-ms = <HOLD_TAP_MS>;
      bindings = <&mo>, <&key_repeat>;
      retro-tap;
    };

    gresc: grave_escape {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&kp GRAVE>, <&kp ESC>;
      mods = <(MOD_RGUI|MOD_RSFT)>;
    };
  };

  macros {
    enter_esc: enter_esc {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      // 30ms+ to avoid having HID notifications grouped at the BLE protocol level and being processed out of order.
      wait-ms = <40>;
      tap-ms = <40>;
      bindings = <&kp ENTER &kp ESC>;
    };
  };

  combos {
    compatible = "zmk,combos";

    // This is annoying for gaming so lets not use them lol
    // rs_enter {
    //   timeout-ms = <COMBO_TIMEOUT_MS>;
    //   key-positions = <14 15>; // R S
    //   bindings = <&kp ENTER>;
    //   require-prior-idle-ms = <PRIOR_IDLE_MS>;
    // };

    // st_esc {
    //   timeout-ms = <COMBO_TIMEOUT_MS>;
    //   key-positions = <15 16>; // S T
    //   bindings = <&kp ESC>;
    //   require-prior-idle-ms = <PRIOR_IDLE_MS>;
    // };

    fp_esc {
      timeout-ms = <COMBO_TIMEOUT_MS>;
      key-positions = <3 4>; // F P
      bindings = <&kp LG(P)>;
      require-prior-idle-ms = <PRIOR_IDLE_MS>;
    };

    ei_enter {
      timeout-ms = <COMBO_TIMEOUT_MS>;
      key-positions = <20 21>; // E I
      bindings = <&kp ENTER>;
      require-prior-idle-ms = <PRIOR_IDLE_MS>;
    };

    ne_esc {
      timeout-ms = <COMBO_TIMEOUT_MS>;
      key-positions = <19 20>; // N E
      bindings = <&kp ESC>;
      require-prior-idle-ms = <PRIOR_IDLE_MS>;
    };

    nei_enter_esc {
      timeout-ms = <COMBO_TIMEOUT_MS>;
      key-positions = <19 20 21>; // N E I
      bindings = <&enter_esc>;
      require-prior-idle-ms = <PRIOR_IDLE_MS>;
    };

    combo_menu {
      timeout-ms = <COMBO_TIMEOUT_MS>;
      key-positions = <32 33>; // COMMA DOT
      bindings = <&kp K_CMENU>;
      require-prior-idle-ms = <PRIOR_IDLE_MS>;
    };


    // xc_copy {
    //   timeout-ms = <COMBO_TIMEOUT_MS>;
    //   key-positions = <X C>;
    //   bindings = <&kp LC(C)>;
    // };

    cd_paste {
      timeout-ms = <COMBO_TIMEOUT_MS>;
      key-positions = <27 28>;
      bindings = <&kp LS(LC(V))>;
    };
  };

  // conditional_layers {
  //   compatible = "zmk,conditional-layers";
  //   tri_layer {
  //     if-layers = <NUMS NAV>;
  //     then-layer = <BT>;
  //   };
  // };

  keymap {
    compatible = "zmk,keymap";

    // 0 - Base layer
    colemakdh_layer {
      bindings = <
        &kp TAB    &kp Q   &kp W  &kp F  &kp P     &kp B                                                     &kp J             &kp L        &kp U      &kp Y    &kp SEMI  &kp BSPC
        &kp LCTRL  &kp A   &kp R  &kp S  &kp T     &kp G                                                     &kp M             &kp N        &kp E      &kp I    &kp O     &kp SQT
        &kp LSHFT  &kp Z   &kp X  &kp C  &kp D     &kp V                                                     &kp K             &kp H        &kp COMMA  &kp DOT  &kp FSLH  TD_SHLOCK
                                         &kp LALT  &kp SPACE &mo NUMS                               &mo NAV  &mt RSHIFT SPACE  TD_GUIMENU
      >;
    };

    // 1 - Numbers, symbols, F-keys
    nums_layer {
      bindings = <
        &gresc  &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT                                               &kp CARET  &kp AMPS  &kp STAR  &kp LPAR  &kp RPAR  &trans
        &trans  &kp N1    &kp N2  &kp N3    &kp N4    &kp N5                                                  &kp N6     &kp N7    &kp N8    &kp N9    &kp N0    &kp F11
        &trans  &kp F1    &kp F2  &kp F3    &kp F4    &kp F5                                                  &kp F6     &kp F7    &kp F8    &kp F9    &kp F10   &kp F12
                                            &trans    &kp ESC  &none                                &kp RGUI  &trans     &trans
      >;
    };

    // 2 - Navgation, Window Mgmt, Media
    nav_layer {
      bindings = <
        &trans  &kp LT    &kp LBRC   &kp RBRC  &kp PSCRN  &kp PIPE                                         &kp HOME    &kp PG_DN     &kp PG_UP     &kp END     &kp MINUS  &kp EQUAL
        &trans  &kp PLUS  &kp LBKT   &kp RBKT  &kp EQUAL  &kp GT                                           &kp LEFT    &kp DOWN      &kp UP        &kp RIGHT   &kp LBKT   &kp RBKT
        &trans  &tog BT   &kp MINUS  &kp BSPC  &kp UNDER  &kp DEL                                          &kp C_PREV  &kp C_VOL_DN  &kp C_VOL_UP  &kp C_NEXT  &kp BSLH   &kp C_PP
                                               &trans     &trans     &kp LGUI                       &none  &trans      &trans
      >;
    };

    // 3 - BT, Media, LEDs, Misc, and keyboard settings
    keeb_layer {
      bindings = <
        &none  &none         &none         &none         &none        &none                                &rgb_ug RGB_SPD                     &rgb_ug RGB_HUD  &rgb_ug RGB_HUI  &rgb_ug RGB_SPI  &none  &out OUT_TOG
        &none  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &none        &none                                &rgb_ug RGB_EFR                     &rgb_ug RGB_BRD  &rgb_ug RGB_BRI  &rgb_ug RGB_EFF  &none  &none
        &none  &tog BT       &none         &none         &none        &none                                &rgb_ug RGB_COLOR_HSB(360, 0, 100)  &rgb_ug RGB_SAD  &rgb_ug RGB_SAI  &none            &none  &bt BT_CLR
                                                         &bootloader  &none  &none                  &none  &rgb_ug RGB_TOG  &bootloader
      >;
    };
  };
};

